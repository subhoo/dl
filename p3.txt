import numpy as np

def initial_weights_bias(num_features):
    weights = np.random.rand(num_features)
    bias = np.random.rand(1) 
    return weights, bias

def perception_train(inputs, targets, weights, bias, learning_rate=0.1, max_iterations=1000):
    num_iterations = 0
    converged = False
    while not converged and num_iterations < max_iterations:
        num_iterations += 1
        converged = True
        for input_data, target in zip(inputs, targets):
            weighted_sum = np.dot(weights, input_data) + bias[0]
            output = 1 if weighted_sum >= 0 else 0
            if output != target:
                converged = False
                weights += learning_rate * (target - output) * input_data
                bias += learning_rate * (target - output) * 1
    return weights, bias, num_iterations

inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
targets = np.array([0, 0, 0, 1])
num_features = len(inputs[0])
weights, bias = initial_weights_bias(num_features)
trained_weights, trained_bias, num_iterations = perception_train(inputs, targets, weights, bias)
print(f"Converged in {num_iterations} iterations")
print("Trained weights:", trained_weights)
print("Trained bias:", trained_bias[0])